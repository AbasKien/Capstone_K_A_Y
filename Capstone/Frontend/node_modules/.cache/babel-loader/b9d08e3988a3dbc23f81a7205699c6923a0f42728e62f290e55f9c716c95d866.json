{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BarChart = _resolveComponent(\"BarChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Top Selling Products\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when chartData is ready \"), $data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_BarChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","chartData","labels","length","_createBlock","_component_BarChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\TopSellingProductsChart.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5>Top Selling Products</h5>\n      </div>\n      <div class=\"card-body\">\n        <!-- Render the chart only when chartData is ready -->\n        <BarChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n        <p v-else>Loading chart data...</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Bar } from 'vue-chartjs';\n  import {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n  } from 'chart.js';\n  \n  ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { BarChart: Bar },\n    data() {\n      return {\n        chartData: {\n          labels: [], // Product names\n          datasets: [{\n            label: 'Total Sold',\n            data: [],\n            backgroundColor: 'rgba(75, 192, 192, 0.5)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          }],\n        },\n        chartOptions: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n            },\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Products',\n              },\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Total Sold',\n              },\n              beginAtZero: true,\n            },\n          },\n        },\n      };\n    },\n    async mounted() {\n      try {\n        const response = await fetch('http://localhost:5555/products/top-selling-products');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched top selling products data:', data);\n  \n        if (data && Array.isArray(data.topSellingProducts)) {\n          this.chartData.labels = data.topSellingProducts.map(product => product.product_name);\n          this.chartData.datasets[0].data = data.topSellingProducts.map(product => product.total_sold);\n        } else {\n          console.error(\"Expected topSellingProducts to be an array:\", data);\n          this.chartData.labels = [];\n          this.chartData.datasets[0].data = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch top selling products data:', error);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .card {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n    margin-bottom: 1.5rem;\n    background: white;\n  }\n\n  .card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.12);\n  }\n\n  .card-header {\n    background: white;\n    border-bottom: none;\n    padding: 1.5rem;\n    border-radius: 12px 12px 0 0 !important;\n  }\n\n  .card-header h5 {\n    margin: 0;\n    color: #2c3e50;\n    font-weight: 600;\n    font-size: 1.25rem;\n  }\n\n  .card-body {\n    padding: 1.5rem;\n  }\n\n  /* Chart container */\n  .chart-container {\n    position: relative;\n    margin: auto;\n    height: 400px;\n  }\n  </style>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAW;;EAL5BC,GAAA;AAAA;;;uBACIC,mBAAA,CASM,OATNC,UASM,G,0BARJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACtBI,mBAAA,CAA6B,YAAzB,sBAAoB,E,sBAE1BA,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,mDAAsD,EACtCC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAApDC,YAAA,CAAkGC,mBAAA;IAP1GX,GAAA;IAO+DY,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEAClFb,mBAAA,CAAmC,KAR3Cc,UAAA,EAQkB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}