{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    LineChart: Line\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        // Time intervals (e.g., dates or weeks)\n        datasets: [] // Array of datasets for each product\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n            labels: {\n              usePointStyle: true,\n              padding: 20,\n              font: {\n                size: 12\n              }\n            }\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            titleColor: '#000',\n            bodyColor: '#000',\n            borderColor: '#ddd',\n            borderWidth: 1,\n            padding: 10,\n            displayColors: true,\n            callbacks: {\n              label: function (context) {\n                return `${context.dataset.label}: ${context.parsed.y}`;\n              }\n            }\n          }\n        },\n        interaction: {\n          mode: 'nearest',\n          axis: 'x',\n          intersect: false\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45,\n              font: {\n                size: 11\n              }\n            },\n            title: {\n              display: true,\n              text: 'Time',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              borderDash: [2, 2]\n            },\n            title: {\n              display: true,\n              text: 'Stock Change',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            }\n          }\n        }\n      }\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched stock changes data:', data);\n      if (data && Array.isArray(data.stockChanges)) {\n        const products = {};\n        let allTimestamps = new Set();\n\n        // Format the date and time for display\n        const formatDate = date => {\n          return new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false // 24-hour format\n          }).format(new Date(date));\n        };\n\n        // Organize data into products and collect all timestamps\n        data.stockChanges.forEach(change => {\n          if (!products[change.product_name]) {\n            const hue = Object.keys(products).length * (360 / data.stockChanges.length);\n            products[change.product_name] = {\n              label: change.product_name,\n              data: [],\n              borderColor: `hsl(${hue}, 85%, 55%)`,\n              backgroundColor: `hsla(${hue}, 85%, 55%, 0.1)`,\n              tension: 0.4,\n              borderWidth: 2,\n              pointRadius: 3,\n              pointHoverRadius: 6,\n              fill: true\n            };\n          }\n          const formattedTimestamp = formatDate(change.created_at);\n          allTimestamps.add(formattedTimestamp);\n          products[change.product_name].data.push({\n            x: formattedTimestamp,\n            y: change.quantity_changed\n          });\n        });\n\n        // Sort timestamps and assign them as labels\n        this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\n\n        // Sort the data in each dataset by formatted timestamp\n        this.chartData.datasets = Object.values(products).map(dataset => {\n          dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\n          return dataset;\n        });\n      } else {\n        console.error(\"Expected stockChanges to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch stock changes data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets = [];\n    }\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","PointElement","CategoryScale","LinearScale","register","components","LineChart","data","chartData","labels","datasets","chartOptions","responsive","maintainAspectRatio","plugins","legend","display","position","usePointStyle","padding","font","size","tooltip","mode","intersect","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","displayColors","callbacks","label","context","dataset","parsed","y","interaction","axis","scales","x","grid","ticks","maxRotation","minRotation","title","text","weight","beginAtZero","borderDash","mounted","response","fetch","ok","Error","status","json","console","log","Array","isArray","stockChanges","products","allTimestamps","Set","formatDate","date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","Date","forEach","change","product_name","hue","Object","keys","length","tension","pointRadius","pointHoverRadius","fill","formattedTimestamp","created_at","add","push","quantity_changed","from","sort","a","b","values","map","error"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\StockChangesChart.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h5>Stock Changes Over Time by Product</h5>\n        </div>\n        <div class=\"card-body\">\n            <!-- Render the chart only when chartData is ready -->\n            <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n            <p v-else>Loading chart data...</p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    LineElement,\n    PointElement,\n    CategoryScale,\n    LinearScale,\n} from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n\nexport default {\n    components: { LineChart: Line },\n    data() {\n        return {\n            chartData: {\n                labels: [], // Time intervals (e.g., dates or weeks)\n                datasets: [], // Array of datasets for each product\n            },\n            chartOptions: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true,\n                        position: 'top',\n                        labels: {\n                            usePointStyle: true,\n                            padding: 20,\n                            font: {\n                                size: 12\n                            }\n                        }\n                    },\n                    tooltip: {\n                        mode: 'index',\n                        intersect: false,\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                        titleColor: '#000',\n                        bodyColor: '#000',\n                        borderColor: '#ddd',\n                        borderWidth: 1,\n                        padding: 10,\n                        displayColors: true,\n                        callbacks: {\n                            label: function(context) {\n                                return `${context.dataset.label}: ${context.parsed.y}`;\n                            }\n                        }\n                    }\n                },\n                interaction: {\n                    mode: 'nearest',\n                    axis: 'x',\n                    intersect: false\n                },\n                scales: {\n                    x: {\n                        grid: {\n                            display: false\n                        },\n                        ticks: {\n                            maxRotation: 45,\n                            minRotation: 45,\n                            font: {\n                                size: 11\n                            }\n                        },\n                        title: {\n                            display: true,\n                            text: 'Time',\n                            font: {\n                                size: 14,\n                                weight: 'bold'\n                            }\n                        }\n                    },\n                    y: {\n                        beginAtZero: true,\n                        grid: {\n                            borderDash: [2, 2]\n                        },\n                        title: {\n                            display: true,\n                            text: 'Stock Change',\n                            font: {\n                                size: 14,\n                                weight: 'bold'\n                            }\n                        }\n                    }\n                }\n            },\n        };\n    },\n    async mounted() {\n        try {\n            const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n            console.log('Fetched stock changes data:', data);\n\n            if (data && Array.isArray(data.stockChanges)) {\n                const products = {};\n                let allTimestamps = new Set();\n\n                // Format the date and time for display\n                const formatDate = (date) => {\n                    return new Intl.DateTimeFormat('en-US', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        hour12: false, // 24-hour format\n                    }).format(new Date(date));\n                };\n\n                // Organize data into products and collect all timestamps\n                data.stockChanges.forEach(change => {\n                    if (!products[change.product_name]) {\n                        const hue = Object.keys(products).length * (360 / data.stockChanges.length);\n                        products[change.product_name] = {\n                            label: change.product_name,\n                            data: [],\n                            borderColor: `hsl(${hue}, 85%, 55%)`,\n                            backgroundColor: `hsla(${hue}, 85%, 55%, 0.1)`,\n                            tension: 0.4,\n                            borderWidth: 2,\n                            pointRadius: 3,\n                            pointHoverRadius: 6,\n                            fill: true,\n                        };\n                    }\n                    const formattedTimestamp = formatDate(change.created_at);\n                    allTimestamps.add(formattedTimestamp);\n                    products[change.product_name].data.push({\n                        x: formattedTimestamp,\n                        y: change.quantity_changed,\n                    });\n                });\n\n                // Sort timestamps and assign them as labels\n                this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\n\n                // Sort the data in each dataset by formatted timestamp\n                this.chartData.datasets = Object.values(products).map(dataset => {\n                    dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\n                    return dataset;\n                });\n\n            } else {\n                console.error(\"Expected stockChanges to be an array:\", data);\n                this.chartData.labels = [];\n                this.chartData.datasets = [];\n            }\n        } catch (error) {\n            console.error('Failed to fetch stock changes data:', error);\n            this.chartData.labels = [];\n            this.chartData.datasets = [];\n        }\n    },\n\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}