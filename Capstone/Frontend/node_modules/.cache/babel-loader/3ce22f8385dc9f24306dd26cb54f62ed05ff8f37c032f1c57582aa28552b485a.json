{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Stock Changes Over Time by Product\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when chartData is ready \"), $data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","chartData","labels","length","_createBlock","_component_LineChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\StockChangesChart.vue"],"sourcesContent":["<template>\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <h5>Stock Changes Over Time by Product</h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <!-- Render the chart only when chartData is ready -->\r\n            <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\r\n            <p v-else>Loading chart data...</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Line } from 'vue-chartjs';\r\nimport {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    LineElement,\r\n    PointElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n} from 'chart.js';\r\n\r\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\r\n\r\nexport default {\r\n    components: { LineChart: Line },\r\n    data() {\r\n        return {\r\n            chartData: {\r\n                labels: [], // Time intervals (e.g., dates or weeks)\r\n                datasets: [], // Array of datasets for each product\r\n            },\r\n            chartOptions: {\r\n                responsive: true,\r\n                plugins: {\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top',\r\n                    },\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Time',\r\n                        },\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Stock Change',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    },\r\n    async mounted() {\r\n        try {\r\n            const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            console.log('Fetched stock changes data:', data);\r\n\r\n            if (data && Array.isArray(data.stockChanges)) {\r\n                const products = {};\r\n                let allTimestamps = new Set();\r\n\r\n                // Format the date and time for display\r\n                const formatDate = (date) => {\r\n                    return new Intl.DateTimeFormat('en-US', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit',\r\n                        hour12: false, // 24-hour format\r\n                    }).format(new Date(date));\r\n                };\r\n\r\n                // Organize data into products and collect all timestamps\r\n                data.stockChanges.forEach(change => {\r\n                    if (!products[change.product_name]) {\r\n                        products[change.product_name] = {\r\n                            label: change.product_name,\r\n                            data: [],\r\n                            borderColor: `hsl(${Math.random() * 360}, 100%, 50%)`, // Random color for each product\r\n                            fill: false,\r\n                        };\r\n                    }\r\n                    const formattedTimestamp = formatDate(change.created_at);\r\n                    allTimestamps.add(formattedTimestamp);\r\n                    products[change.product_name].data.push({\r\n                        x: formattedTimestamp,\r\n                        y: change.quantity_changed,\r\n                    });\r\n                });\r\n\r\n                // Sort timestamps and assign them as labels\r\n                this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\r\n\r\n                // Sort the data in each dataset by formatted timestamp\r\n                this.chartData.datasets = Object.values(products).map(dataset => {\r\n                    dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\r\n                    return dataset;\r\n                });\r\n\r\n            } else {\r\n                console.error(\"Expected stockChanges to be an array:\", data);\r\n                this.chartData.labels = [];\r\n                this.chartData.datasets = [];\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch stock changes data:', error);\r\n            this.chartData.labels = [];\r\n            this.chartData.datasets = [];\r\n        }\r\n    },\r\n\r\n};\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAIRA,KAAK,EAAC;AAAW;;EAL9BC,GAAA;AAAA;;;uBACIC,mBAAA,CASM,OATNC,UASM,G,0BARFC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACpBI,mBAAA,CAA2C,YAAvC,oCAAkC,E,sBAE1CA,mBAAA,CAIM,OAJNC,UAIM,GAHFC,mBAAA,mDAAsD,EACrCC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAArDC,YAAA,CAAmGC,oBAAA;IAP/GX,GAAA;IAOoEY,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEACnFb,mBAAA,CAAmC,KAR/Cc,UAAA,EAQsB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}