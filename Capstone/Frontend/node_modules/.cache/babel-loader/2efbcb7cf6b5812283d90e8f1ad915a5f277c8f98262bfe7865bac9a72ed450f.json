{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport axios from 'axios';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminOrder',\n  data() {\n    return {\n      orders: [],\n      selectedOrder: null,\n      orderItems: [],\n      modal: null,\n      isAdmin: false\n    };\n  },\n  computed: {\n    pendingOrders() {\n      return this.orders.filter(order => order.status === 'pending').length;\n    },\n    shippedOrders() {\n      return this.orders.filter(order => order.status === 'ship').length;\n    },\n    toDeliverOrders() {\n      return this.orders.filter(order => order.status === 'delivered').length;\n    },\n    completedOrders() {\n      return this.orders.filter(order => order.status === 'complete').length;\n    },\n    cancelledOrders() {\n      return this.orders.filter(order => order.status === 'cancelled').length;\n    }\n  },\n  methods: {\n    async checkAdminSession() {\n      try {\n        const response = await axios.get('http://localhost:5555/admin/check', {\n          withCredentials: true\n        });\n        this.isAdmin = response.data.isAdmin;\n        if (!this.isAdmin) {\n          this.$router.push('/login');\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n        this.$router.push('/login');\n      }\n    },\n    async fetchOrders() {\n      try {\n        const response = await axios.get('http://localhost:5555/admin/orders', {\n          withCredentials: true\n        });\n        this.orders = response.data.orders;\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    getStatusDisplay(status) {\n      const statusMap = {\n        pending: 'To Pay',\n        ship: 'To Ship',\n        delivered: 'To Deliver',\n        complete: 'Complete',\n        cancelled: 'Cancelled'\n      };\n      return statusMap[status] || status;\n    },\n    getStatusBadgeClass(status) {\n      const statusClassMap = {\n        pending: 'badge bg-warning',\n        ship: 'badge bg-primary',\n        delivered: 'badge bg-info',\n        complete: 'badge bg-success',\n        cancelled: 'badge bg-danger'\n      };\n      return statusClassMap[status] || 'badge bg-secondary';\n    },\n    async updateStatus(orderId, newStatus) {\n      try {\n        const order = this.orders.find(o => o.id === orderId);\n        if (!order) return;\n        const currentStatus = order.status;\n\n        // Prevent changing status of completed or cancelled orders\n        if (currentStatus === 'complete' || currentStatus === 'cancelled') {\n          alert('Cannot modify completed or cancelled orders');\n          order.status = currentStatus;\n          return;\n        }\n\n        // Fetch order details for completing the order\n        let items = [];\n        if (newStatus === 'complete') {\n          try {\n            const detailsResponse = await axios.get(`http://localhost:5555/admin/orders/${orderId}`, {\n              withCredentials: true\n            });\n            if (detailsResponse.data.success && detailsResponse.data.orderDetails) {\n              const orderDetails = detailsResponse.data.orderDetails;\n              if (!orderDetails.items || orderDetails.items.length === 0) {\n                alert('No items found in order');\n                order.status = currentStatus;\n                return;\n              }\n              items = orderDetails.items.map(item => ({\n                product_id: item.product_id,\n                quantity: item.quantity,\n                stock: item.stock\n              }));\n            } else {\n              throw new Error('Failed to get order details');\n            }\n          } catch (error) {\n            console.error('Error fetching order details:', error);\n            alert('Failed to fetch order details for completion');\n            order.status = currentStatus;\n            return;\n          }\n        }\n        const response = await axios.put(`http://localhost:5555/admin/orders/${orderId}/status`, {\n          status: newStatus,\n          items: newStatus === 'complete' ? items : []\n        }, {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          order.status = newStatus;\n          if (newStatus === 'complete') {\n            alert('Order completed successfully.');\n          } else {\n            alert('Order status updated successfully');\n          }\n          await this.fetchOrders();\n        }\n      } catch (error) {\n        console.error('Error updating status:', error);\n        alert(error.response?.data?.message || 'Failed to update order status');\n      }\n    },\n    async viewDetails(order) {\n      try {\n        const response = await axios.get(`http://localhost:5555/admin/orders/${order.id}/details`, {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          this.selectedOrder = response.data.order;\n          this.orderItems = response.data.order.items;\n          new Modal(this.$refs.orderModal).show();\n        }\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n        alert('Failed to fetch order details');\n      }\n    },\n    closeModal() {\n      this.selectedOrder = null;\n      this.orderItems = [];\n    }\n  },\n  created() {\n    this.checkAdminSession();\n    this.fetchOrders();\n  }\n};","map":{"version":3,"names":["axios","Modal","name","data","orders","selectedOrder","orderItems","modal","isAdmin","computed","pendingOrders","filter","order","status","length","shippedOrders","toDeliverOrders","completedOrders","cancelledOrders","methods","checkAdminSession","response","get","withCredentials","$router","push","error","console","fetchOrders","formatDate","date","Date","toLocaleDateString","getStatusDisplay","statusMap","pending","ship","delivered","complete","cancelled","getStatusBadgeClass","statusClassMap","updateStatus","orderId","newStatus","find","o","id","currentStatus","alert","items","detailsResponse","success","orderDetails","map","item","product_id","quantity","stock","Error","put","message","viewDetails","$refs","orderModal","show","closeModal","created"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\AdminOrder.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex\">\n    <!-- Sidebar -->\n    <nav class=\"sidebar bg-dark text-white vh-100 p-3\">\n      <h4 class=\"text-white mb-4\">Admin Dashboard</h4>\n      <ul class=\"nav nav-pills flex-column\">\n        <!-- Dashboard Link -->\n        <li class=\"nav-item\">\n          <router-link to=\"/admin/dashboard\" class=\"nav-link text-white\" active-class=\"active\">\n            <i class=\"fas fa-home me-2\"></i> Dashboard\n          </router-link>\n        </li>\n        \n        <!-- Products Link -->\n        <li class=\"nav-item\">\n          <router-link to=\"/admin/products\" class=\"nav-link text-white\" active-class=\"active\">\n            <i class=\"fas fa-box me-2\"></i> Products\n          </router-link>\n        </li>\n\n        <!-- Product Logs Link -->\n        <li class=\"nav-item\">\n          <router-link to=\"/admin/product-logs\" class=\"nav-link text-white\" active-class=\"active\">\n            <i class=\"fas fa-clipboard-list me-2\"></i> Product Logs\n          </router-link>\n        </li>\n\n        <!-- Orders Link -->\n        <li class=\"nav-item\">\n          <router-link to=\"/admin/orders\" class=\"nav-link text-white\" active-class=\"active\">\n            <i class=\"fas fa-truck me-2\"></i> Orders\n          </router-link>\n        </li>\n\n        <!-- Logout Button -->\n        <li class=\"nav-item mt-auto\">\n          <button @click=\"handleLogout\" class=\"btn btn-danger w-100 mt-3\">\n            <i class=\"fas fa-sign-out-alt me-2\"></i> Logout\n          </button>\n        </li>\n      </ul>\n    </nav>\n\n    <!-- Main Content -->\n    <div class=\"flex-grow-1 p-4\">\n      <div class=\"container-fluid\">\n        <div class=\"card shadow\">\n          <div class=\"card-header bg-primary text-white\">\n            <h4 class=\"mb-0\">Order Management</h4>\n          </div>\n          <div class=\"card-body\">\n            <!-- Order Statistics -->\n            <div class=\"row mb-4\">\n              <div class=\"col\">\n                <div class=\"card bg-warning text-white\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">To Pay</h5>\n                    <h2>{{ pendingOrders }}</h2>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col\">\n                <div class=\"card bg-primary text-white\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">To Ship</h5>\n                    <h2>{{ shippedOrders }}</h2>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col\">\n                <div class=\"card bg-info text-white\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">To Deliver</h5>\n                    <h2>{{ toDeliverOrders }}</h2>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col\">\n                <div class=\"card bg-success text-white\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">Completed</h5>\n                    <h2>{{ completedOrders }}</h2>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col\">\n                <div class=\"card bg-danger text-white\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">Cancelled</h5>\n                    <h2>{{ cancelledOrders }}</h2>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Orders Table -->\n            <div class=\"table-responsive\">\n              <table class=\"table table-hover\">\n                <thead class=\"bg-light\">\n                  <tr>\n                    <th>Order ID</th>\n                    <th>Customer</th>\n                    <th>Contact</th>\n                    <th>Total Price</th>\n                    <th>Status</th>\n                    <th>Date</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"order in orders\" :key=\"order.id\">\n                    <td>#{{ order.id }}</td>\n                    <td>{{ order.fullname || 'Customer' }}</td>\n                    <td>{{ order.contact_number }}</td>\n                    <td>₱{{ parseFloat(order.total_price).toFixed(2) }}</td>\n                    <td>\n                      <span :class=\"getStatusBadgeClass(order.status)\">\n                        {{ getStatusDisplay(order.status) }}\n                      </span>\n                    </td>\n                    <td>{{ formatDate(order.created_at) }}</td>\n                    <td>\n                      <div class=\"d-flex gap-2\">\n                        <select \n                          v-model=\"order.status\" \n                          @change=\"updateStatus(order.id, $event.target.value)\"\n                          class=\"form-select form-select-sm me-2\"\n                          style=\"width: auto;\"\n                        >\n                          <option value=\"pending\">To Pay</option>\n                          <option value=\"ship\">To Ship</option>\n                          <option value=\"delivered\">To Deliver</option>\n                          <option value=\"complete\">Complete</option>\n                          <option value=\"cancelled\">Cancelled</option>\n                        </select>\n                        <button \n                          @click=\"viewDetails(order)\"\n                          class=\"btn btn-info btn-sm\"\n                        >\n                          <i class=\"fas fa-eye\"></i> Details\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <!-- Order Details Modal -->\n        <div class=\"modal fade\" id=\"orderDetailsModal\" tabindex=\"-1\" ref=\"orderModal\">\n          <div class=\"modal-dialog modal-lg\">\n            <div class=\"modal-content\">\n              <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Order Details</h5>\n                <button type=\"button\" class=\"btn-close\" @click=\"closeModal\"></button>\n              </div>\n              <div class=\"modal-body\" v-if=\"selectedOrder\">\n                <div class=\"row mb-4\">\n                  <div class=\"col-md-6\">\n                    <h6>Customer Information</h6>\n                    <p><strong>Name:</strong> {{ selectedOrder.fullname }}</p>\n                    <p><strong>Contact:</strong> {{ selectedOrder.contact_number }}</p>\n                    <p><strong>Address:</strong> {{ selectedOrder.address }}</p>\n                  </div>\n                  <div class=\"col-md-6\">\n                    <h6>Order Information</h6>\n                    <p><strong>Order ID:</strong> #{{ selectedOrder.id }}</p>\n                    <p><strong>Status:</strong> {{ getStatusDisplay(selectedOrder.status) }}</p>\n                    <p><strong>Payment Method:</strong> Cash on Delivery</p>\n                    <p><strong>Date:</strong> {{ formatDate(selectedOrder.created_at) }}</p>\n                  </div>\n                </div>\n                <h6>Order Items</h6>\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th>Item</th>\n                      <th>Price</th>\n                      <th>Quantity</th>\n                      <th>Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr v-for=\"item in orderItems\" :key=\"item.id\">\n                      <td>{{ item.name }}</td>\n                      <td>₱{{ Number(item.price).toFixed(2) }}</td>\n                      <td>{{ item.quantity }}</td>\n                      <td>₱{{ (Number(item.price) * item.quantity).toFixed(2) }}</td>\n                    </tr>\n                  </tbody>\n                  <tfoot>\n                    <tr>\n                      <td colspan=\"3\" class=\"text-end\"><strong>Total:</strong></td>\n                      <td>₱{{ Number(selectedOrder.total_price).toFixed(2) }}</td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeModal\">Close</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { Modal } from 'bootstrap';\n\nexport default {\n  name: 'AdminOrder',\n  data() {\n    return {\n      orders: [],\n      selectedOrder: null,\n      orderItems: [],\n      modal: null,\n      isAdmin: false\n    };\n  },\n  computed: {\n    pendingOrders() {\n      return this.orders.filter(order => order.status === 'pending').length;\n    },\n    shippedOrders() {\n      return this.orders.filter(order => order.status === 'ship').length;\n    },\n    toDeliverOrders() {\n      return this.orders.filter(order => order.status === 'delivered').length;\n    },\n    completedOrders() {\n      return this.orders.filter(order => order.status === 'complete').length;\n    },\n    cancelledOrders() {\n      return this.orders.filter(order => order.status === 'cancelled').length;\n    }\n  },\n  methods: {\n    async checkAdminSession() {\n      try {\n        const response = await axios.get('http://localhost:5555/admin/check', {\n          withCredentials: true\n        });\n        this.isAdmin = response.data.isAdmin;\n        if (!this.isAdmin) {\n          this.$router.push('/login');\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n        this.$router.push('/login');\n      }\n    },\n    async fetchOrders() {\n      try {\n        const response = await axios.get('http://localhost:5555/admin/orders', {\n          withCredentials: true\n        });\n        this.orders = response.data.orders;\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    getStatusDisplay(status) {\n      const statusMap = {\n        pending: 'To Pay',\n        ship: 'To Ship',\n        delivered: 'To Deliver',\n        complete: 'Complete',\n        cancelled: 'Cancelled'\n      };\n      return statusMap[status] || status;\n    },\n    getStatusBadgeClass(status) {\n      const statusClassMap = {\n        pending: 'badge bg-warning',\n        ship: 'badge bg-primary',\n        delivered: 'badge bg-info',\n        complete: 'badge bg-success',\n        cancelled: 'badge bg-danger'\n      };\n      return statusClassMap[status] || 'badge bg-secondary';\n    },\n    async updateStatus(orderId, newStatus) {\n      try {\n        const order = this.orders.find(o => o.id === orderId);\n        if (!order) return;\n\n        const currentStatus = order.status;\n\n        // Prevent changing status of completed or cancelled orders\n        if (currentStatus === 'complete' || currentStatus === 'cancelled') {\n          alert('Cannot modify completed or cancelled orders');\n          order.status = currentStatus;\n          return;\n        }\n\n        // Fetch order details for completing the order\n        let items = [];\n        if (newStatus === 'complete') {\n          try {\n            const detailsResponse = await axios.get(\n              `http://localhost:5555/admin/orders/${orderId}`,\n              { withCredentials: true }\n            );\n            if (detailsResponse.data.success && detailsResponse.data.orderDetails) {\n              const orderDetails = detailsResponse.data.orderDetails;\n              if (!orderDetails.items || orderDetails.items.length === 0) {\n                alert('No items found in order');\n                order.status = currentStatus;\n                return;\n              }\n              items = orderDetails.items.map(item => ({\n                product_id: item.product_id,\n                quantity: item.quantity,\n                stock: item.stock\n              }));\n            } else {\n              throw new Error('Failed to get order details');\n            }\n          } catch (error) {\n            console.error('Error fetching order details:', error);\n            alert('Failed to fetch order details for completion');\n            order.status = currentStatus;\n            return;\n          }\n        }\n\n        const response = await axios.put(\n          `http://localhost:5555/admin/orders/${orderId}/status`,\n          { \n            status: newStatus,\n            items: newStatus === 'complete' ? items : []\n          },\n          { withCredentials: true }\n        );\n\n        if (response.data.success) {\n          order.status = newStatus;\n\n          if (newStatus === 'complete') {\n            alert('Order completed successfully.');\n          } else {\n            alert('Order status updated successfully');\n          }\n\n          await this.fetchOrders();\n        }\n      } catch (error) {\n        console.error('Error updating status:', error);\n        alert(error.response?.data?.message || 'Failed to update order status');\n      }\n    },\n    async viewDetails(order) {\n      try {\n        const response = await axios.get(\n          `http://localhost:5555/admin/orders/${order.id}/details`,\n          { withCredentials: true }\n        );\n        if (response.data.success) {\n          this.selectedOrder = response.data.order;\n          this.orderItems = response.data.order.items;\n          new Modal(this.$refs.orderModal).show();\n        }\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n        alert('Failed to fetch order details');\n      }\n    },\n    closeModal() {\n      this.selectedOrder = null;\n      this.orderItems = [];\n    }\n  },\n  created() {\n    this.checkAdminSession();\n    this.fetchOrders();\n  }\n};\n</script>\n\n<style scoped>\n/* Custom styles for the admin page */\n.sidebar {\n  width: 250px;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n\n.table {\n  margin-top: 20px;\n}\n\n.card-title {\n  font-size: 1.25rem;\n}\n\n.card-body h2 {\n  font-size: 2rem;\n}\n\n.table-responsive {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;;;;AAoNA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,KAAI,QAAS,WAAW;AAEjC,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,IAAI;MACnBC,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACN,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,SAAS,CAAC,CAACC,MAAM;IACvE,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACX,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,MAAM,CAAC,CAACC,MAAM;IACpE,CAAC;IACDE,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACZ,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,WAAW,CAAC,CAACC,MAAM;IACzE,CAAC;IACDG,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACb,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,UAAU,CAAC,CAACC,MAAM;IACxE,CAAC;IACDI,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACd,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,WAAW,CAAC,CAACC,MAAM;IACzE;EACF,CAAC;EACDK,OAAO,EAAE;IACP,MAAMC,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAC,mCAAmC,EAAE;UACpEC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAI,CAACf,OAAM,GAAIa,QAAQ,CAAClB,IAAI,CAACK,OAAO;QACpC,IAAI,CAAC,IAAI,CAACA,OAAO,EAAE;UACjB,IAAI,CAACgB,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC7B;IACF,CAAC;IACD,MAAMG,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAC,oCAAoC,EAAE;UACrEC,eAAe,EAAE;QACnB,CAAC,CAAC;QACF,IAAI,CAACnB,MAAK,GAAIiB,QAAQ,CAAClB,IAAI,CAACC,MAAM;MACpC,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACDG,UAAUA,CAACC,IAAI,EAAE;MACf,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,CAAC;IAC5C,CAAC;IACDC,gBAAgBA,CAACpB,MAAM,EAAE;MACvB,MAAMqB,SAAQ,GAAI;QAChBC,OAAO,EAAE,QAAQ;QACjBC,IAAI,EAAE,SAAS;QACfC,SAAS,EAAE,YAAY;QACvBC,QAAQ,EAAE,UAAU;QACpBC,SAAS,EAAE;MACb,CAAC;MACD,OAAOL,SAAS,CAACrB,MAAM,KAAKA,MAAM;IACpC,CAAC;IACD2B,mBAAmBA,CAAC3B,MAAM,EAAE;MAC1B,MAAM4B,cAAa,GAAI;QACrBN,OAAO,EAAE,kBAAkB;QAC3BC,IAAI,EAAE,kBAAkB;QACxBC,SAAS,EAAE,eAAe;QAC1BC,QAAQ,EAAE,kBAAkB;QAC5BC,SAAS,EAAE;MACb,CAAC;MACD,OAAOE,cAAc,CAAC5B,MAAM,KAAK,oBAAoB;IACvD,CAAC;IACD,MAAM6B,YAAYA,CAACC,OAAO,EAAEC,SAAS,EAAE;MACrC,IAAI;QACF,MAAMhC,KAAI,GAAI,IAAI,CAACR,MAAM,CAACyC,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMJ,OAAO,CAAC;QACrD,IAAI,CAAC/B,KAAK,EAAE;QAEZ,MAAMoC,aAAY,GAAIpC,KAAK,CAACC,MAAM;;QAElC;QACA,IAAImC,aAAY,KAAM,UAAS,IAAKA,aAAY,KAAM,WAAW,EAAE;UACjEC,KAAK,CAAC,6CAA6C,CAAC;UACpDrC,KAAK,CAACC,MAAK,GAAImC,aAAa;UAC5B;QACF;;QAEA;QACA,IAAIE,KAAI,GAAI,EAAE;QACd,IAAIN,SAAQ,KAAM,UAAU,EAAE;UAC5B,IAAI;YACF,MAAMO,eAAc,GAAI,MAAMnD,KAAK,CAACsB,GAAG,CACrC,sCAAsCqB,OAAO,EAAE,EAC/C;cAAEpB,eAAe,EAAE;YAAK,CAC1B,CAAC;YACD,IAAI4B,eAAe,CAAChD,IAAI,CAACiD,OAAM,IAAKD,eAAe,CAAChD,IAAI,CAACkD,YAAY,EAAE;cACrE,MAAMA,YAAW,GAAIF,eAAe,CAAChD,IAAI,CAACkD,YAAY;cACtD,IAAI,CAACA,YAAY,CAACH,KAAI,IAAKG,YAAY,CAACH,KAAK,CAACpC,MAAK,KAAM,CAAC,EAAE;gBAC1DmC,KAAK,CAAC,yBAAyB,CAAC;gBAChCrC,KAAK,CAACC,MAAK,GAAImC,aAAa;gBAC5B;cACF;cACAE,KAAI,GAAIG,YAAY,CAACH,KAAK,CAACI,GAAG,CAACC,IAAG,KAAM;gBACtCC,UAAU,EAAED,IAAI,CAACC,UAAU;gBAC3BC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;gBACvBC,KAAK,EAAEH,IAAI,CAACG;cACd,CAAC,CAAC,CAAC;YACL,OAAO;cACL,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;YAChD;UACF,EAAE,OAAOjC,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;YACrDuB,KAAK,CAAC,8CAA8C,CAAC;YACrDrC,KAAK,CAACC,MAAK,GAAImC,aAAa;YAC5B;UACF;QACF;QAEA,MAAM3B,QAAO,GAAI,MAAMrB,KAAK,CAAC4D,GAAG,CAC9B,sCAAsCjB,OAAO,SAAS,EACtD;UACE9B,MAAM,EAAE+B,SAAS;UACjBM,KAAK,EAAEN,SAAQ,KAAM,UAAS,GAAIM,KAAI,GAAI;QAC5C,CAAC,EACD;UAAE3B,eAAe,EAAE;QAAK,CAC1B,CAAC;QAED,IAAIF,QAAQ,CAAClB,IAAI,CAACiD,OAAO,EAAE;UACzBxC,KAAK,CAACC,MAAK,GAAI+B,SAAS;UAExB,IAAIA,SAAQ,KAAM,UAAU,EAAE;YAC5BK,KAAK,CAAC,+BAA+B,CAAC;UACxC,OAAO;YACLA,KAAK,CAAC,mCAAmC,CAAC;UAC5C;UAEA,MAAM,IAAI,CAACrB,WAAW,CAAC,CAAC;QAC1B;MACF,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CuB,KAAK,CAACvB,KAAK,CAACL,QAAQ,EAAElB,IAAI,EAAE0D,OAAM,IAAK,+BAA+B,CAAC;MACzE;IACF,CAAC;IACD,MAAMC,WAAWA,CAAClD,KAAK,EAAE;MACvB,IAAI;QACF,MAAMS,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAC9B,sCAAsCV,KAAK,CAACmC,EAAE,UAAU,EACxD;UAAExB,eAAe,EAAE;QAAK,CAC1B,CAAC;QACD,IAAIF,QAAQ,CAAClB,IAAI,CAACiD,OAAO,EAAE;UACzB,IAAI,CAAC/C,aAAY,GAAIgB,QAAQ,CAAClB,IAAI,CAACS,KAAK;UACxC,IAAI,CAACN,UAAS,GAAIe,QAAQ,CAAClB,IAAI,CAACS,KAAK,CAACsC,KAAK;UAC3C,IAAIjD,KAAK,CAAC,IAAI,CAAC8D,KAAK,CAACC,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC;QACzC;MACF,EAAE,OAAOvC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDuB,KAAK,CAAC,+BAA+B,CAAC;MACxC;IACF,CAAC;IACDiB,UAAUA,CAAA,EAAG;MACX,IAAI,CAAC7D,aAAY,GAAI,IAAI;MACzB,IAAI,CAACC,UAAS,GAAI,EAAE;IACtB;EACF,CAAC;EACD6D,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC/C,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACQ,WAAW,CAAC,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}