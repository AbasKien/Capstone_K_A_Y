{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Sales Performance Over Time\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [$data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","chartData","labels","length","_createBlock","_component_LineChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\SalesPerformanceChart.vue"],"sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h5>Sales Performance Over Time</h5>\n    </div>\n    <div class=\"card-body\">\n      <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n      <p v-else>Loading chart data...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  PointElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n\nexport default {\n  components: { LineChart: Line },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        datasets: [{\n          label: 'Total Sales',\n          data: [],\n          borderColor: '#3498db',\n          backgroundColor: 'rgba(52, 152, 219, 0.1)',\n          tension: 0.4,\n          borderWidth: 2,\n          fill: true,\n        }],\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n              label: function(context) {\n                const value = context.parsed.y;\n                return `Total Sales: $${value.toFixed(2)}`;\n              }\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date',\n            },\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45,\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Total Sales ($)',\n            },\n            beginAtZero: true,\n            ticks: {\n              callback: function(value) {\n                return '$' + value.toFixed(2);\n              }\n            }\n          },\n        },\n      },\n      pollingInterval: null,\n    };\n  },\n  async mounted() {\n    await this.fetchSalesData();\n    // Set up polling to refresh data every minute\n    this.pollingInterval = setInterval(this.fetchSalesData, 60000);\n    // Listen for order completion events\n    window.addEventListener('orderStatusUpdated', this.fetchSalesData);\n  },\n  beforeDestroy() {\n    // Clean up polling interval\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    // Clean up event listener\n    window.removeEventListener('orderStatusUpdated', this.fetchSalesData);\n  },\n  methods: {\n    async fetchSalesData() {\n      try {\n        // Get the token from localStorage\n        const token = localStorage.getItem('token');\n        if (!token) {\n          console.error('No authentication token found');\n          return;\n        }\n\n        const response = await fetch('http://localhost:5555/products/sales-performance', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log('Fetched sales performance data:', data);\n\n        if (data.success && Array.isArray(data.salesPerformance)) {\n          // Sort data by date\n          const sortedData = [...data.salesPerformance].sort((a, b) => \n            new Date(a.date) - new Date(b.date)\n          );\n\n          // Format dates and prepare data\n          this.chartData.labels = sortedData.map(item => {\n            // Create date object (it will use local timezone)\n            const date = new Date(item.date);\n            // Format date in Manila time (UTC+8)\n            return date.toLocaleDateString('en-US', {\n              month: 'short',\n              day: 'numeric',\n              year: 'numeric',\n              timeZone: 'Asia/Manila'\n            });\n          });\n          this.chartData.datasets[0].data = sortedData.map(item => item.total_sales);\n        }\n      } catch (error) {\n        console.error('Failed to fetch sales performance data:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin: 1rem;\n}\n\n.card-header {\n  padding: 1rem;\n  border-bottom: 1px solid #eee;\n}\n\n.card-header h5 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 600;\n}\n\n.card-body {\n  padding: 1rem;\n  height: 400px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAW;;EAL1BC,GAAA;AAAA;;;uBACEC,mBAAA,CAQM,OARNC,UAQM,G,0BAPJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACtBI,mBAAA,CAAoC,YAAhC,6BAA2B,E,sBAEjCA,mBAAA,CAGM,OAHNC,UAGM,GAFaC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAArDC,YAAA,CAAmGC,oBAAA;IANzGV,GAAA;IAM8DW,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEACnFZ,mBAAA,CAAmC,KAPzCa,UAAA,EAOgB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}