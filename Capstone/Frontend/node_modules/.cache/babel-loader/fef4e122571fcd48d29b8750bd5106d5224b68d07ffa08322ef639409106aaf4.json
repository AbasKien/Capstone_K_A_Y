{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Sales Performance Over Time\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when chartData is ready \"), $data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","chartData","labels","length","_createBlock","_component_LineChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\SalesPerformanceChart.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5>Sales Performance Over Time</h5>\n      </div>\n      <div class=\"card-body\">\n        <!-- Render the chart only when chartData is ready -->\n        <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n        <p v-else>Loading chart data...</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Line } from 'vue-chartjs';\n  import {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    LineElement,\n    PointElement,\n    CategoryScale,\n    LinearScale,\n  } from 'chart.js';\n  \n  ChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { LineChart: Line },\n    data() {\n      return {\n        chartData: {\n          labels: [], // Time labels (e.g., dates)\n          datasets: [{\n            label: 'Total Sales',\n            data: [],\n            borderColor: 'rgb(52, 152, 219)',\n            backgroundColor: 'rgba(52, 152, 219, 0.1)',\n            tension: 0.4,\n            borderWidth: 2,\n            pointRadius: 3,\n            pointHoverRadius: 6,\n            fill: true,\n          }],\n        },\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              mode: 'index',\n              intersect: false,\n              backgroundColor: 'rgba(255, 255, 255, 0.9)',\n              titleColor: '#000',\n              bodyColor: '#000',\n              borderColor: '#ddd',\n              borderWidth: 1,\n              padding: 10,\n              callbacks: {\n                label: function(context) {\n                  const value = context.parsed.y;\n                  return `Total Sales: $${value.toFixed(2)}`;\n                }\n              }\n            }\n          },\n          interaction: {\n            mode: 'nearest',\n            axis: 'x',\n            intersect: false\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45,\n                font: {\n                  size: 11\n                }\n              },\n              title: {\n                display: true,\n                text: 'Date',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            y: {\n              beginAtZero: true,\n              grid: {\n                borderDash: [2, 2]\n              },\n              ticks: {\n                callback: function(value) {\n                  return '$' + value.toFixed(2);\n                }\n              },\n              title: {\n                display: true,\n                text: 'Total Sales ($)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            }\n          }\n        },\n      };\n    },\n    async mounted() {\n      try {\n        const response = await fetch('http://localhost:5555/products/sales-performance');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched sales performance data:', data);\n\n        if (data && Array.isArray(data.salesPerformance)) {\n          const labels = [];\n          const salesData = [];\n\n          // Format data for the chart\n          data.salesPerformance.forEach(item => {\n            const date = new Date(item.date);\n            const formattedDate = new Intl.DateTimeFormat('en-US', {\n              year: 'numeric',\n              month: 'short',\n              day: '2-digit'\n            }).format(date);\n            \n            labels.push(formattedDate);\n            salesData.push(parseFloat(item.total_sales));\n          });\n\n          // Sort data chronologically\n          const sortedIndices = labels.map((_, i) => i)\n            .sort((a, b) => new Date(data.salesPerformance[a].date) - new Date(data.salesPerformance[b].date));\n\n          this.chartData.labels = sortedIndices.map(i => labels[i]);\n          this.chartData.datasets[0].data = sortedIndices.map(i => salesData[i]);\n        } else {\n          console.error(\"Expected salesPerformance to be an array:\", data);\n          this.chartData.labels = [];\n          this.chartData.datasets[0].data = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch sales performance data:', error);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    },\n  };\n  </script>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAW;;EAL5BC,GAAA;AAAA;;;uBACIC,mBAAA,CASM,OATNC,UASM,G,0BARJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACtBI,mBAAA,CAAoC,YAAhC,6BAA2B,E,sBAEjCA,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,mDAAsD,EACrCC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAArDC,YAAA,CAAmGC,oBAAA;IAP3GX,GAAA;IAOgEY,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEACnFb,mBAAA,CAAmC,KAR3Cc,UAAA,EAQkB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}