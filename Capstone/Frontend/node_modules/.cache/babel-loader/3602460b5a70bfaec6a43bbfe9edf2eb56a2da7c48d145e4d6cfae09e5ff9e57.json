{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Stock Changes Over Time by Product\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when chartData is ready \"), $data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","chartData","labels","length","_createBlock","_component_LineChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\StockChangesChart.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n        <div class=\"card-header\">\n            <h5>Stock Changes Over Time by Product</h5>\n        </div>\n        <div class=\"card-body\">\n            <!-- Render the chart only when chartData is ready -->\n            <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n            <p v-else>Loading chart data...</p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    LineElement,\n    PointElement,\n    CategoryScale,\n    LinearScale,\n} from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n\nexport default {\n    components: { LineChart: Line },\n    data() {\n        return {\n            chartData: {\n                labels: [], // Time intervals (e.g., dates or weeks)\n                datasets: [], // Array of datasets for each product\n            },\n            chartOptions: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: true,\n                        position: 'top',\n                        labels: {\n                            usePointStyle: true,\n                            padding: 20,\n                            font: {\n                                size: 12\n                            }\n                        }\n                    },\n                    tooltip: {\n                        mode: 'index',\n                        intersect: false,\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                        titleColor: '#000',\n                        bodyColor: '#000',\n                        borderColor: '#ddd',\n                        borderWidth: 1,\n                        padding: 10,\n                        displayColors: true,\n                        callbacks: {\n                            label: function(context) {\n                                return `${context.dataset.label}: ${context.parsed.y}`;\n                            }\n                        }\n                    }\n                },\n                interaction: {\n                    mode: 'nearest',\n                    axis: 'x',\n                    intersect: false\n                },\n                scales: {\n                    x: {\n                        grid: {\n                            display: false\n                        },\n                        ticks: {\n                            maxRotation: 45,\n                            minRotation: 45,\n                            font: {\n                                size: 11\n                            }\n                        },\n                        title: {\n                            display: true,\n                            text: 'Time',\n                            font: {\n                                size: 14,\n                                weight: 'bold'\n                            }\n                        }\n                    },\n                    y: {\n                        beginAtZero: true,\n                        grid: {\n                            borderDash: [2, 2]\n                        },\n                        title: {\n                            display: true,\n                            text: 'Stock Change',\n                            font: {\n                                size: 14,\n                                weight: 'bold'\n                            }\n                        }\n                    }\n                }\n            },\n        };\n    },\n    async mounted() {\n        try {\n            const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const data = await response.json();\n            console.log('Fetched stock changes data:', data);\n\n            if (data && Array.isArray(data.stockChanges)) {\n                const products = {};\n                let allTimestamps = new Set();\n\n                // Format the date and time for display\n                const formatDate = (date) => {\n                    return new Intl.DateTimeFormat('en-US', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        hour12: false, // 24-hour format\n                    }).format(new Date(date));\n                };\n\n                // Organize data into products and collect all timestamps\n                data.stockChanges.forEach(change => {\n                    if (!products[change.product_name]) {\n                        const hue = Object.keys(products).length * (360 / data.stockChanges.length);\n                        products[change.product_name] = {\n                            label: change.product_name,\n                            data: [],\n                            borderColor: `hsl(${hue}, 85%, 55%)`,\n                            backgroundColor: `hsla(${hue}, 85%, 55%, 0.1)`,\n                            tension: 0.4,\n                            borderWidth: 2,\n                            pointRadius: 3,\n                            pointHoverRadius: 6,\n                            fill: true,\n                        };\n                    }\n                    const formattedTimestamp = formatDate(change.created_at);\n                    allTimestamps.add(formattedTimestamp);\n                    products[change.product_name].data.push({\n                        x: formattedTimestamp,\n                        y: change.quantity_changed,\n                    });\n                });\n\n                // Sort timestamps and assign them as labels\n                this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\n\n                // Sort the data in each dataset by formatted timestamp\n                this.chartData.datasets = Object.values(products).map(dataset => {\n                    dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\n                    return dataset;\n                });\n\n            } else {\n                console.error(\"Expected stockChanges to be an array:\", data);\n                this.chartData.labels = [];\n                this.chartData.datasets = [];\n            }\n        } catch (error) {\n            console.error('Failed to fetch stock changes data:', error);\n            this.chartData.labels = [];\n            this.chartData.datasets = [];\n        }\n    },\n\n};\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAIRA,KAAK,EAAC;AAAW;;EAL9BC,GAAA;AAAA;;;uBACIC,mBAAA,CASM,OATNC,UASM,G,0BARFC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACpBI,mBAAA,CAA2C,YAAvC,oCAAkC,E,sBAE1CA,mBAAA,CAIM,OAJNC,UAIM,GAHFC,mBAAA,mDAAsD,EACrCC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAArDC,YAAA,CAAmGC,oBAAA;IAP/GX,GAAA;IAOoEY,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEACnFb,mBAAA,CAAmC,KAR/Cc,UAAA,EAQsB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}