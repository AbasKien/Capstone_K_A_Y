{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    LineChart: Line\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        // Time intervals (e.g., dates or weeks)\n        datasets: [] // Array of datasets for each product\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          }\n        },\n        scales: {\n          x: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Time'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Stock Change'\n            }\n          }\n        }\n      }\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched stock changes data:', data);\n      if (data && Array.isArray(data.stockChanges)) {\n        const products = {};\n        let allTimestamps = new Set();\n\n        // Format the date and time for display\n        const formatDate = date => {\n          return new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false // 24-hour format\n          }).format(new Date(date));\n        };\n\n        // Organize data into products and collect all timestamps\n        data.stockChanges.forEach(change => {\n          if (!products[change.product_name]) {\n            products[change.product_name] = {\n              label: change.product_name,\n              data: [],\n              borderColor: `hsl(${Math.random() * 360}, 100%, 50%)`,\n              // Random color for each product\n              fill: false\n            };\n          }\n          const formattedTimestamp = formatDate(change.created_at);\n          allTimestamps.add(formattedTimestamp);\n          products[change.product_name].data.push({\n            x: formattedTimestamp,\n            y: change.quantity_changed\n          });\n        });\n\n        // Sort timestamps and assign them as labels\n        this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\n\n        // Sort the data in each dataset by formatted timestamp\n        this.chartData.datasets = Object.values(products).map(dataset => {\n          dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\n          return dataset;\n        });\n      } else {\n        console.error(\"Expected stockChanges to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch stock changes data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets = [];\n    }\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","PointElement","CategoryScale","LinearScale","register","components","LineChart","data","chartData","labels","datasets","chartOptions","responsive","plugins","legend","display","position","scales","x","beginAtZero","title","text","y","mounted","response","fetch","ok","Error","status","json","console","log","Array","isArray","stockChanges","products","allTimestamps","Set","formatDate","date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","Date","forEach","change","product_name","label","borderColor","Math","random","fill","formattedTimestamp","created_at","add","push","quantity_changed","from","sort","a","b","Object","values","map","dataset","error"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdev_Ito yun\\project_appdev\\Frontend\\src\\views\\StockChangesChart.vue"],"sourcesContent":["<template>\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <h5>Stock Changes Over Time by Product</h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n            <!-- Render the chart only when chartData is ready -->\r\n            <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\r\n            <p v-else>Loading chart data...</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { Line } from 'vue-chartjs';\r\nimport {\r\n    Chart as ChartJS,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    LineElement,\r\n    PointElement,\r\n    CategoryScale,\r\n    LinearScale,\r\n} from 'chart.js';\r\n\r\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\r\n\r\nexport default {\r\n    components: { LineChart: Line },\r\n    data() {\r\n        return {\r\n            chartData: {\r\n                labels: [], // Time intervals (e.g., dates or weeks)\r\n                datasets: [], // Array of datasets for each product\r\n            },\r\n            chartOptions: {\r\n                responsive: true,\r\n                plugins: {\r\n                    legend: {\r\n                        display: true,\r\n                        position: 'top',\r\n                    },\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Time',\r\n                        },\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Stock Change',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    },\r\n    async mounted() {\r\n        try {\r\n            const response = await fetch('http://localhost:5555/products/stock-changes-over-time');\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            console.log('Fetched stock changes data:', data);\r\n\r\n            if (data && Array.isArray(data.stockChanges)) {\r\n                const products = {};\r\n                let allTimestamps = new Set();\r\n\r\n                // Format the date and time for display\r\n                const formatDate = (date) => {\r\n                    return new Intl.DateTimeFormat('en-US', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                        hour: '2-digit',\r\n                        minute: '2-digit',\r\n                        hour12: false, // 24-hour format\r\n                    }).format(new Date(date));\r\n                };\r\n\r\n                // Organize data into products and collect all timestamps\r\n                data.stockChanges.forEach(change => {\r\n                    if (!products[change.product_name]) {\r\n                        products[change.product_name] = {\r\n                            label: change.product_name,\r\n                            data: [],\r\n                            borderColor: `hsl(${Math.random() * 360}, 100%, 50%)`, // Random color for each product\r\n                            fill: false,\r\n                        };\r\n                    }\r\n                    const formattedTimestamp = formatDate(change.created_at);\r\n                    allTimestamps.add(formattedTimestamp);\r\n                    products[change.product_name].data.push({\r\n                        x: formattedTimestamp,\r\n                        y: change.quantity_changed,\r\n                    });\r\n                });\r\n\r\n                // Sort timestamps and assign them as labels\r\n                this.chartData.labels = Array.from(allTimestamps).sort((a, b) => new Date(a) - new Date(b));\r\n\r\n                // Sort the data in each dataset by formatted timestamp\r\n                this.chartData.datasets = Object.values(products).map(dataset => {\r\n                    dataset.data.sort((a, b) => new Date(a.x) - new Date(b.x));\r\n                    return dataset;\r\n                });\r\n\r\n            } else {\r\n                console.error(\"Expected stockChanges to be an array:\", data);\r\n                this.chartData.labels = [];\r\n                this.chartData.datasets = [];\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch stock changes data:', error);\r\n            this.chartData.labels = [];\r\n            this.chartData.datasets = [];\r\n        }\r\n    },\r\n\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}