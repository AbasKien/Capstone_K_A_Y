{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport loginview from '../views/loginview.vue';\nimport home from '../views/home.vue';\nimport admin from '../views/admin.vue';\nconst routes = [{\n  path: '/',\n  name: 'login',\n  component: loginview\n}, {\n  path: '/signup',\n  name: 'signup',\n  component: register\n}, {\n  path: '/home',\n  name: 'home',\n  component: home,\n  meta: {\n    requiresRole: ['Lead architect', 'Secretary', 'Book keeper', 'Liaison', 'Apprentice']\n  }\n}, {\n  path: '/admin/dashboard',\n  name: 'admin',\n  component: admin,\n  meta: {\n    requiresRole: ['admin']\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Navigation Guard\nrouter.beforeEach(async (to, from, next) => {\n  const userRole = localStorage.getItem('userRole');\n  const token = localStorage.getItem('token');\n  const isLoggedIn = token && userRole;\n\n  // Public routes that don't require authentication\n  const publicRoutes = ['login', 'signup'];\n\n  // If route is public, allow access\n  if (publicRoutes.includes(to.name)) {\n    // If user is logged in and trying to access login/signup, redirect to appropriate dashboard\n    if (isLoggedIn && (to.name === 'login' || to.name === 'signup')) {\n      return next(userRole === 'admin' ? '/admin/dashboard' : '/home');\n    }\n    return next();\n  }\n\n  // For protected routes, check if user is logged in\n  if (!isLoggedIn) {\n    return next('/');\n  }\n\n  // For role-protected routes, verify role\n  if (to.meta.requiresRole) {\n    // If role doesn't match, redirect to appropriate dashboard\n    if (!to.meta.requiresRole.includes(userRole)) {\n      return next(userRole === 'admin' ? '/admin/dashboard' : '/home');\n    }\n  }\n\n  // If all checks pass, proceed\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","loginview","home","admin","routes","path","name","component","register","meta","requiresRole","router","history","process","env","BASE_URL","beforeEach","to","from","next","userRole","localStorage","getItem","token","isLoggedIn","publicRoutes","includes"],"sources":["C:/laragon/www/capstone/project_appdev/Frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport loginview from '../views/loginview.vue';\nimport home from '../views/home.vue';\nimport admin from '../views/admin.vue';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'login',\n    component: loginview,\n  },\n  {\n    path: '/signup',\n    name: 'signup',\n    component: register,\n  },\n  {\n    path: '/home',\n    name: 'home',\n    component: home,\n    meta: { requiresRole: ['Lead architect', 'Secretary', 'Book keeper', 'Liaison', 'Apprentice'] },\n  },\n  {\n    path: '/admin/dashboard',\n    name: 'admin',\n    component: admin,\n    meta: { requiresRole: ['admin'] },\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\n// Navigation Guard\nrouter.beforeEach(async (to, from, next) => {\n  const userRole = localStorage.getItem('userRole');\n  const token = localStorage.getItem('token');\n  const isLoggedIn = token && userRole;\n\n  // Public routes that don't require authentication\n  const publicRoutes = ['login', 'signup'];\n\n  // If route is public, allow access\n  if (publicRoutes.includes(to.name)) {\n    // If user is logged in and trying to access login/signup, redirect to appropriate dashboard\n    if (isLoggedIn && (to.name === 'login' || to.name === 'signup')) {\n      return next(userRole === 'admin' ? '/admin/dashboard' : '/home');\n    }\n    return next();\n  }\n\n  // For protected routes, check if user is logged in\n  if (!isLoggedIn) {\n    return next('/');\n  }\n\n  // For role-protected routes, verify role\n  if (to.meta.requiresRole) {\n    // If role doesn't match, redirect to appropriate dashboard\n    if (!to.meta.requiresRole.includes(userRole)) {\n      return next(userRole === 'admin' ? '/admin/dashboard' : '/home');\n    }\n  }\n\n  // If all checks pass, proceed\n  next();\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,MAAM,oBAAoB;AAEtC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEC;AACb,CAAC,EACD;EACEH,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEL,IAAI;EACfO,IAAI,EAAE;IAAEC,YAAY,EAAE,CAAC,gBAAgB,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY;EAAE;AAChG,CAAC,EACD;EACEL,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ,KAAK;EAChBM,IAAI,EAAE;IAAEC,YAAY,EAAE,CAAC,OAAO;EAAE;AAClC,CAAC,CACF;AAED,MAAMC,MAAM,GAAGZ,YAAY,CAAC;EAC1Ba,OAAO,EAAEZ,gBAAgB,CAACa,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CX;AACF,CAAC,CAAC;;AAEF;AACAO,MAAM,CAACK,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAME,UAAU,GAAGD,KAAK,IAAIH,QAAQ;;EAEpC;EACA,MAAMK,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;;EAExC;EACA,IAAIA,YAAY,CAACC,QAAQ,CAACT,EAAE,CAACX,IAAI,CAAC,EAAE;IAClC;IACA,IAAIkB,UAAU,KAAKP,EAAE,CAACX,IAAI,KAAK,OAAO,IAAIW,EAAE,CAACX,IAAI,KAAK,QAAQ,CAAC,EAAE;MAC/D,OAAOa,IAAI,CAACC,QAAQ,KAAK,OAAO,GAAG,kBAAkB,GAAG,OAAO,CAAC;IAClE;IACA,OAAOD,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,IAAI,CAACK,UAAU,EAAE;IACf,OAAOL,IAAI,CAAC,GAAG,CAAC;EAClB;;EAEA;EACA,IAAIF,EAAE,CAACR,IAAI,CAACC,YAAY,EAAE;IACxB;IACA,IAAI,CAACO,EAAE,CAACR,IAAI,CAACC,YAAY,CAACgB,QAAQ,CAACN,QAAQ,CAAC,EAAE;MAC5C,OAAOD,IAAI,CAACC,QAAQ,KAAK,OAAO,GAAG,kBAAkB,GAAG,OAAO,CAAC;IAClE;EACF;;EAEA;EACAD,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}