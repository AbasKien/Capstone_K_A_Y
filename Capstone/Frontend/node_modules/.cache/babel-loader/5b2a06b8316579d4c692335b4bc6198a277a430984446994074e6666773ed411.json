{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport axios from 'axios';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminOrder',\n  data() {\n    return {\n      orders: [],\n      selectedOrder: null,\n      orderItems: [],\n      modal: null,\n      isAdmin: false\n    };\n  },\n  computed: {\n    pendingOrders() {\n      return this.orders.filter(order => order.status === 'pending').length;\n    },\n    completedOrders() {\n      return this.orders.filter(order => order.status === 'delivered').length;\n    },\n    cancelledOrders() {\n      return this.orders.filter(order => order.status === 'cancelled').length;\n    }\n  },\n  methods: {\n    async checkAdminSession() {\n      try {\n        const response = await axios.get('http://localhost:5555/check-session', {\n          withCredentials: true\n        });\n        if (response.data.role !== 'admin') {\n          this.$router.push('/login');\n          return false;\n        }\n        this.isAdmin = true;\n        return true;\n      } catch (error) {\n        console.error('Session check failed:', error);\n        this.$router.push('/login');\n        return false;\n      }\n    },\n    async fetchOrders() {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n        const response = await axios.get('http://localhost:5555/admin/orders', {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          this.orders = response.data.orders;\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        }\n      }\n    },\n    async updateStatus(orderId, newStatus) {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n        const response = await axios.put(`http://localhost:5555/admin/orders/${orderId}/status`, {\n          status: newStatus\n        }, {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          const order = this.orders.find(o => o.id === orderId);\n          if (order) {\n            order.status = newStatus;\n          }\n          alert('Order status updated successfully!');\n        }\n      } catch (error) {\n        console.error('Error updating order status:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        } else {\n          alert('Failed to update order status');\n        }\n      }\n    },\n    async viewDetails(order) {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n        const response = await axios.get(`http://localhost:5555/admin/orders/${order.id}`, {\n          withCredentials: true\n        });\n        if (response.data.success) {\n          this.selectedOrder = order;\n          this.orderItems = response.data.orderDetails.items || [];\n          this.modal.show();\n        }\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        } else {\n          alert('Failed to fetch order details');\n        }\n      }\n    },\n    closeModal() {\n      this.modal.hide();\n      this.selectedOrder = null;\n      this.orderItems = [];\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        paid: 'badge bg-info',\n        shipped: 'badge bg-primary',\n        delivered: 'badge bg-success',\n        cancelled: 'badge bg-danger'\n      };\n      return classes[status] || 'badge bg-secondary';\n    }\n  },\n  async created() {\n    const isAdminUser = await this.checkAdminSession();\n    if (isAdminUser) {\n      this.fetchOrders();\n    }\n  },\n  mounted() {\n    this.modal = new Modal(this.$refs.orderModal);\n    // Fetch orders every minute to keep the list updated\n    this.interval = setInterval(() => {\n      if (this.isAdmin) {\n        this.fetchOrders();\n      }\n    }, 60000);\n  },\n  beforeUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n};","map":{"version":3,"names":["axios","Modal","name","data","orders","selectedOrder","orderItems","modal","isAdmin","computed","pendingOrders","filter","order","status","length","completedOrders","cancelledOrders","methods","checkAdminSession","response","get","withCredentials","role","$router","push","error","console","fetchOrders","isAdminUser","success","updateStatus","orderId","newStatus","put","find","o","id","alert","viewDetails","orderDetails","items","show","closeModal","hide","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","getStatusBadgeClass","classes","pending","paid","shipped","delivered","cancelled","created","mounted","$refs","orderModal","interval","setInterval","beforeUnmount","clearInterval"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\AdminOrder.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div class=\"card shadow\">\n      <div class=\"card-header bg-primary text-white\">\n        <h4 class=\"mb-0\">Order Management</h4>\n      </div>\n      <div class=\"card-body\">\n        <!-- Order Statistics -->\n        <div class=\"row mb-4\">\n          <div class=\"col-md-3\">\n            <div class=\"card bg-info text-white\">\n              <div class=\"card-body\">\n                <h5>Total Orders</h5>\n                <h3>{{ orders.length }}</h3>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-3\">\n            <div class=\"card bg-warning text-white\">\n              <div class=\"card-body\">\n                <h5>Pending Orders</h5>\n                <h3>{{ pendingOrders }}</h3>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-3\">\n            <div class=\"card bg-success text-white\">\n              <div class=\"card-body\">\n                <h5>Completed Orders</h5>\n                <h3>{{ completedOrders }}</h3>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-3\">\n            <div class=\"card bg-danger text-white\">\n              <div class=\"card-body\">\n                <h5>Cancelled Orders</h5>\n                <h3>{{ cancelledOrders }}</h3>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Orders Table -->\n        <div class=\"table-responsive\">\n          <table class=\"table table-hover\">\n            <thead class=\"bg-light\">\n              <tr>\n                <th>Order ID</th>\n                <th>Customer</th>\n                <th>Contact</th>\n                <th>Total Price</th>\n                <th>Status</th>\n                <th>Date</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"order in orders\" :key=\"order.id\">\n                <td>#{{ order.id }}</td>\n                <td>{{ order.username }}</td>\n                <td>{{ order.contact_number }}</td>\n                <td>â‚±{{ order.total_price }}</td>\n                <td>\n                  <span :class=\"getStatusBadgeClass(order.status)\">\n                    {{ order.status }}\n                  </span>\n                </td>\n                <td>{{ formatDate(order.created_at) }}</td>\n                <td>\n                  <div class=\"d-flex gap-2\">\n                    <select \n                      v-model=\"order.status\" \n                      @change=\"updateStatus(order.id, $event.target.value)\"\n                      class=\"form-select form-select-sm me-2\"\n                      style=\"width: auto;\"\n                    >\n                      <option value=\"pending\">Pending</option>\n                      <option value=\"paid\">Paid</option>\n                      <option value=\"shipped\">Shipped</option>\n                      <option value=\"delivered\">Delivered</option>\n                      <option value=\"cancelled\">Cancelled</option>\n                    </select>\n                    <button \n                      @click=\"viewDetails(order)\"\n                      class=\"btn btn-info btn-sm\"\n                    >\n                      <i class=\"fas fa-eye\"></i> Details\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n    <!-- Order Details Modal -->\n    <div class=\"modal fade\" id=\"orderDetailsModal\" tabindex=\"-1\" ref=\"orderModal\">\n      <div class=\"modal-dialog modal-lg\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Order Details</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeModal\"></button>\n          </div>\n          <div class=\"modal-body\" v-if=\"selectedOrder\">\n            <div class=\"row mb-4\">\n              <div class=\"col-md-6\">\n                <h6>Customer Information</h6>\n                <p><strong>Name:</strong> {{ selectedOrder.username }}</p>\n                <p><strong>Contact:</strong> {{ selectedOrder.contact_number }}</p>\n                <p><strong>Address:</strong> {{ selectedOrder.address }}</p>\n              </div>\n              <div class=\"col-md-6\">\n                <h6>Order Information</h6>\n                <p><strong>Order ID:</strong> #{{ selectedOrder.id }}</p>\n                <p><strong>Status:</strong> {{ selectedOrder.status }}</p>\n                <p><strong>Payment Method:</strong> {{ selectedOrder.payment_method }}</p>\n                <p><strong>Date:</strong> {{ formatDate(selectedOrder.created_at) }}</p>\n              </div>\n            </div>\n            <h6>Order Items</h6>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Item</th>\n                  <th>Price</th>\n                  <th>Quantity</th>\n                  <th>Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"item in orderItems\" :key=\"item.id\">\n                  <td>{{ item.name }}</td>\n                  <td>â‚±{{ item.price }}</td>\n                  <td>{{ item.quantity }}</td>\n                  <td>â‚±{{ (item.price * item.quantity).toFixed(2) }}</td>\n                </tr>\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td colspan=\"3\" class=\"text-end\"><strong>Total:</strong></td>\n                  <td>â‚±{{ selectedOrder.total_price }}</td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeModal\">Close</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { Modal } from 'bootstrap';\n\nexport default {\n  name: 'AdminOrder',\n  data() {\n    return {\n      orders: [],\n      selectedOrder: null,\n      orderItems: [],\n      modal: null,\n      isAdmin: false\n    };\n  },\n  computed: {\n    pendingOrders() {\n      return this.orders.filter(order => order.status === 'pending').length;\n    },\n    completedOrders() {\n      return this.orders.filter(order => order.status === 'delivered').length;\n    },\n    cancelledOrders() {\n      return this.orders.filter(order => order.status === 'cancelled').length;\n    }\n  },\n  methods: {\n    async checkAdminSession() {\n      try {\n        const response = await axios.get('http://localhost:5555/check-session', {\n          withCredentials: true\n        });\n        \n        if (response.data.role !== 'admin') {\n          this.$router.push('/login');\n          return false;\n        }\n        \n        this.isAdmin = true;\n        return true;\n      } catch (error) {\n        console.error('Session check failed:', error);\n        this.$router.push('/login');\n        return false;\n      }\n    },\n    async fetchOrders() {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n\n        const response = await axios.get('http://localhost:5555/admin/orders', {\n          withCredentials: true\n        });\n        \n        if (response.data.success) {\n          this.orders = response.data.orders;\n        }\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        }\n      }\n    },\n    async updateStatus(orderId, newStatus) {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n\n        const response = await axios.put(`http://localhost:5555/admin/orders/${orderId}/status`, {\n          status: newStatus\n        }, {\n          withCredentials: true\n        });\n\n        if (response.data.success) {\n          const order = this.orders.find(o => o.id === orderId);\n          if (order) {\n            order.status = newStatus;\n          }\n          alert('Order status updated successfully!');\n        }\n      } catch (error) {\n        console.error('Error updating order status:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        } else {\n          alert('Failed to update order status');\n        }\n      }\n    },\n    async viewDetails(order) {\n      try {\n        if (!this.isAdmin) {\n          const isAdminUser = await this.checkAdminSession();\n          if (!isAdminUser) return;\n        }\n\n        const response = await axios.get(`http://localhost:5555/admin/orders/${order.id}`, {\n          withCredentials: true\n        });\n        \n        if (response.data.success) {\n          this.selectedOrder = order;\n          this.orderItems = response.data.orderDetails.items || [];\n          this.modal.show();\n        }\n      } catch (error) {\n        console.error('Error fetching order details:', error);\n        if (error.response?.status === 401) {\n          this.$router.push('/login');\n        } else {\n          alert('Failed to fetch order details');\n        }\n      }\n    },\n    closeModal() {\n      this.modal.hide();\n      this.selectedOrder = null;\n      this.orderItems = [];\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        paid: 'badge bg-info',\n        shipped: 'badge bg-primary',\n        delivered: 'badge bg-success',\n        cancelled: 'badge bg-danger'\n      };\n      return classes[status] || 'badge bg-secondary';\n    }\n  },\n  async created() {\n    const isAdminUser = await this.checkAdminSession();\n    if (isAdminUser) {\n      this.fetchOrders();\n    }\n  },\n  mounted() {\n    this.modal = new Modal(this.$refs.orderModal);\n    // Fetch orders every minute to keep the list updated\n    this.interval = setInterval(() => {\n      if (this.isAdmin) {\n        this.fetchOrders();\n      }\n    }, 60000);\n  },\n  beforeUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.table th {\n  font-weight: 600;\n}\n.badge {\n  font-size: 0.85em;\n  padding: 0.35em 0.65em;\n}\n.card {\n  transition: transform 0.2s;\n}\n.card:hover {\n  transform: translateY(-2px);\n}\n</style>\n"],"mappings":";;;;AA8JA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,KAAI,QAAS,WAAW;AAEjC,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,IAAI;MACnBC,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACN,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,SAAS,CAAC,CAACC,MAAM;IACvE,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACX,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,WAAW,CAAC,CAACC,MAAM;IACzE,CAAC;IACDE,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACZ,MAAM,CAACO,MAAM,CAACC,KAAI,IAAKA,KAAK,CAACC,MAAK,KAAM,WAAW,CAAC,CAACC,MAAM;IACzE;EACF,CAAC;EACDG,OAAO,EAAE;IACP,MAAMC,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,qCAAqC,EAAE;UACtEC,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAAChB,IAAI,CAACmB,IAAG,KAAM,OAAO,EAAE;UAClC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;UAC3B,OAAO,KAAK;QACd;QAEA,IAAI,CAAChB,OAAM,GAAI,IAAI;QACnB,OAAO,IAAI;MACb,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC3B,OAAO,KAAK;MACd;IACF,CAAC;IACD,MAAMG,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,CAAC,IAAI,CAACnB,OAAO,EAAE;UACjB,MAAMoB,WAAU,GAAI,MAAM,IAAI,CAACV,iBAAiB,CAAC,CAAC;UAClD,IAAI,CAACU,WAAW,EAAE;QACpB;QAEA,MAAMT,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,oCAAoC,EAAE;UACrEC,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAAChB,IAAI,CAAC0B,OAAO,EAAE;UACzB,IAAI,CAACzB,MAAK,GAAIe,QAAQ,CAAChB,IAAI,CAACC,MAAM;QACpC;MACF,EAAE,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAIA,KAAK,CAACN,QAAQ,EAAEN,MAAK,KAAM,GAAG,EAAE;UAClC,IAAI,CAACU,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B;MACF;IACF,CAAC;IACD,MAAMM,YAAYA,CAACC,OAAO,EAAEC,SAAS,EAAE;MACrC,IAAI;QACF,IAAI,CAAC,IAAI,CAACxB,OAAO,EAAE;UACjB,MAAMoB,WAAU,GAAI,MAAM,IAAI,CAACV,iBAAiB,CAAC,CAAC;UAClD,IAAI,CAACU,WAAW,EAAE;QACpB;QAEA,MAAMT,QAAO,GAAI,MAAMnB,KAAK,CAACiC,GAAG,CAAC,sCAAsCF,OAAO,SAAS,EAAE;UACvFlB,MAAM,EAAEmB;QACV,CAAC,EAAE;UACDX,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAAChB,IAAI,CAAC0B,OAAO,EAAE;UACzB,MAAMjB,KAAI,GAAI,IAAI,CAACR,MAAM,CAAC8B,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAML,OAAO,CAAC;UACrD,IAAInB,KAAK,EAAE;YACTA,KAAK,CAACC,MAAK,GAAImB,SAAS;UAC1B;UACAK,KAAK,CAAC,oCAAoC,CAAC;QAC7C;MACF,EAAE,OAAOZ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,IAAIA,KAAK,CAACN,QAAQ,EAAEN,MAAK,KAAM,GAAG,EAAE;UAClC,IAAI,CAACU,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B,OAAO;UACLa,KAAK,CAAC,+BAA+B,CAAC;QACxC;MACF;IACF,CAAC;IACD,MAAMC,WAAWA,CAAC1B,KAAK,EAAE;MACvB,IAAI;QACF,IAAI,CAAC,IAAI,CAACJ,OAAO,EAAE;UACjB,MAAMoB,WAAU,GAAI,MAAM,IAAI,CAACV,iBAAiB,CAAC,CAAC;UAClD,IAAI,CAACU,WAAW,EAAE;QACpB;QAEA,MAAMT,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,sCAAsCR,KAAK,CAACwB,EAAE,EAAE,EAAE;UACjFf,eAAe,EAAE;QACnB,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAAChB,IAAI,CAAC0B,OAAO,EAAE;UACzB,IAAI,CAACxB,aAAY,GAAIO,KAAK;UAC1B,IAAI,CAACN,UAAS,GAAIa,QAAQ,CAAChB,IAAI,CAACoC,YAAY,CAACC,KAAI,IAAK,EAAE;UACxD,IAAI,CAACjC,KAAK,CAACkC,IAAI,CAAC,CAAC;QACnB;MACF,EAAE,OAAOhB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,IAAIA,KAAK,CAACN,QAAQ,EAAEN,MAAK,KAAM,GAAG,EAAE;UAClC,IAAI,CAACU,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B,OAAO;UACLa,KAAK,CAAC,+BAA+B,CAAC;QACxC;MACF;IACF,CAAC;IACDK,UAAUA,CAAA,EAAG;MACX,IAAI,CAACnC,KAAK,CAACoC,IAAI,CAAC,CAAC;MACjB,IAAI,CAACtC,aAAY,GAAI,IAAI;MACzB,IAAI,CAACC,UAAS,GAAI,EAAE;IACtB,CAAC;IACDsC,UAAUA,CAACC,UAAU,EAAE;MACrB,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtDC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IACDC,mBAAmBA,CAACxC,MAAM,EAAE;MAC1B,MAAMyC,OAAM,GAAI;QACdC,OAAO,EAAE,kBAAkB;QAC3BC,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAE,kBAAkB;QAC3BC,SAAS,EAAE,kBAAkB;QAC7BC,SAAS,EAAE;MACb,CAAC;MACD,OAAOL,OAAO,CAACzC,MAAM,KAAK,oBAAoB;IAChD;EACF,CAAC;EACD,MAAM+C,OAAOA,CAAA,EAAG;IACd,MAAMhC,WAAU,GAAI,MAAM,IAAI,CAACV,iBAAiB,CAAC,CAAC;IAClD,IAAIU,WAAW,EAAE;MACf,IAAI,CAACD,WAAW,CAAC,CAAC;IACpB;EACF,CAAC;EACDkC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACtD,KAAI,GAAI,IAAIN,KAAK,CAAC,IAAI,CAAC6D,KAAK,CAACC,UAAU,CAAC;IAC7C;IACA,IAAI,CAACC,QAAO,GAAIC,WAAW,CAAC,MAAM;MAChC,IAAI,IAAI,CAACzD,OAAO,EAAE;QAChB,IAAI,CAACmB,WAAW,CAAC,CAAC;MACpB;IACF,CAAC,EAAE,KAAK,CAAC;EACX,CAAC;EACDuC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACF,QAAQ,EAAE;MACjBG,aAAa,CAAC,IAAI,CAACH,QAAQ,CAAC;IAC9B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}