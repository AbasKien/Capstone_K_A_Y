{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    LineChart: Line\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        // Time labels (e.g., dates)\n        datasets: [{\n          label: 'Total Sales',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: false\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Total Sales'\n            },\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/sales-performance');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched sales performance data:', data);\n      if (data && Array.isArray(data.salesPerformance)) {\n        const labels = [];\n        const salesData = [];\n\n        // Format data for the chart\n        data.salesPerformance.forEach(item => {\n          labels.push(item.date);\n          salesData.push(item.total_sales);\n        });\n        this.chartData.labels = labels;\n        this.chartData.datasets[0].data = salesData;\n      } else {\n        console.error(\"Expected salesPerformance to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch sales performance data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets[0].data = [];\n    }\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","PointElement","CategoryScale","LinearScale","register","components","LineChart","data","chartData","labels","datasets","label","borderColor","backgroundColor","fill","chartOptions","responsive","plugins","legend","display","position","scales","x","title","text","y","beginAtZero","mounted","response","fetch","ok","Error","status","json","console","log","Array","isArray","salesPerformance","salesData","forEach","item","push","date","total_sales","error"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\SalesPerformanceChart.vue"],"sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h5>Sales Performance Over Time</h5>\n    </div>\n    <div class=\"card-body\">\n      <!-- Render the chart only when chartData is ready -->\n      <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n      <p v-else>Loading chart data...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  PointElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n\nexport default {\n  components: { LineChart: Line },\n  data() {\n    return {\n      chartData: {\n        labels: [], // Time labels (e.g., dates)\n        datasets: [{\n          label: 'Total Sales',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: false,\n        }],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Total Sales',\n            },\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/sales-performance');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched sales performance data:', data);\n\n      if (data && Array.isArray(data.salesPerformance)) {\n        const labels = [];\n        const salesData = [];\n\n        // Format data for the chart\n        data.salesPerformance.forEach(item => {\n          labels.push(item.date);\n          salesData.push(item.total_sales);\n        });\n\n        this.chartData.labels = labels;\n        this.chartData.datasets[0].data = salesData;\n      } else {\n        console.error(\"Expected salesPerformance to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch sales performance data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets[0].data = [];\n    }\n  },\n};\n</script>\n"],"mappings":";;;AAcA,SAASA,IAAG,QAAS,aAAa;AAClC,SACEC,KAAI,IAAKC,OAAO,EAChBC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,WAAW,QACN,UAAU;AAEjBP,OAAO,CAACQ,QAAQ,CAACP,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,aAAa,EAAEC,WAAW,CAAC;AAE/F,eAAe;EACbE,UAAU,EAAE;IAAEC,SAAS,EAAEZ;EAAK,CAAC;EAC/Ba,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,MAAM,EAAE,EAAE;QAAE;QACZC,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,aAAa;UACpBJ,IAAI,EAAE,EAAE;UACRK,WAAW,EAAE,mBAAmB;UAChCC,eAAe,EAAE,yBAAyB;UAC1CC,IAAI,EAAE;QACR,CAAC;MACH,CAAC;MACDC,YAAY,EAAE;QACZC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,KAAK,EAAE;cACLJ,OAAO,EAAE,IAAI;cACbK,IAAI,EAAE;YACR;UACF,CAAC;UACDC,CAAC,EAAE;YACDF,KAAK,EAAE;cACLJ,OAAO,EAAE,IAAI;cACbK,IAAI,EAAE;YACR,CAAC;YACDE,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,kDAAkD,CAAC;MAChF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMzB,IAAG,GAAI,MAAMqB,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE5B,IAAI,CAAC;MAEpD,IAAIA,IAAG,IAAK6B,KAAK,CAACC,OAAO,CAAC9B,IAAI,CAAC+B,gBAAgB,CAAC,EAAE;QAChD,MAAM7B,MAAK,GAAI,EAAE;QACjB,MAAM8B,SAAQ,GAAI,EAAE;;QAEpB;QACAhC,IAAI,CAAC+B,gBAAgB,CAACE,OAAO,CAACC,IAAG,IAAK;UACpChC,MAAM,CAACiC,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC;UACtBJ,SAAS,CAACG,IAAI,CAACD,IAAI,CAACG,WAAW,CAAC;QAClC,CAAC,CAAC;QAEF,IAAI,CAACpC,SAAS,CAACC,MAAK,GAAIA,MAAM;QAC9B,IAAI,CAACD,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAIgC,SAAS;MAC7C,OAAO;QACLL,OAAO,CAACW,KAAK,CAAC,2CAA2C,EAAEtC,IAAI,CAAC;QAChE,IAAI,CAACC,SAAS,CAACC,MAAK,GAAI,EAAE;QAC1B,IAAI,CAACD,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAI,EAAE;MACtC;IACF,EAAE,OAAOsC,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,IAAI,CAACrC,SAAS,CAACC,MAAK,GAAI,EAAE;MAC1B,IAAI,CAACD,SAAS,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAI,EAAE;IACtC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}