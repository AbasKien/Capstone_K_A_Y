{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Sales Performance Over Time\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Render the chart only when chartData is ready \"), $data.chartData && $data.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Loading chart data...\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","$data","chartData","labels","length","_createBlock","_component_LineChart","data","options","chartOptions","_hoisted_3"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\SalesPerformanceChart.vue"],"sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h5>Sales Performance Over Time</h5>\n    </div>\n    <div class=\"card-body\">\n      <!-- Render the chart only when chartData is ready -->\n      <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n      <p v-else>Loading chart data...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  PointElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n\nexport default {\n  components: { LineChart: Line },\n  data() {\n    return {\n      chartData: {\n        labels: [], // Time labels (e.g., dates)\n        datasets: [{\n          label: 'Total Sales',\n          data: [],\n          borderColor: 'rgb(75, 192, 192)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: false,\n        }],\n      },\n      chartOptions: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n          },\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Total Sales',\n            },\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/sales-performance');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched sales performance data:', data);\n\n      if (data && Array.isArray(data.salesPerformance)) {\n        const labels = [];\n        const salesData = [];\n\n        // Format data for the chart\n        data.salesPerformance.forEach(item => {\n          labels.push(item.date);\n          salesData.push(item.total_sales);\n        });\n\n        this.chartData.labels = labels;\n        this.chartData.datasets[0].data = salesData;\n      } else {\n        console.error(\"Expected salesPerformance to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch sales performance data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets[0].data = [];\n    }\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EAIVA,KAAK,EAAC;AAAW;;EAL1BC,GAAA;AAAA;;;uBACEC,mBAAA,CASM,OATNC,UASM,G,0BARJC,mBAAA,CAEM;IAFDJ,KAAK,EAAC;EAAa,IACtBI,mBAAA,CAAoC,YAAhC,6BAA2B,E,sBAEjCA,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,mDAAsD,EACrCC,KAAA,CAAAC,SAAS,IAAID,KAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAArDC,YAAA,CAAmGC,oBAAA;IAPzGX,GAAA;IAO8DY,IAAI,EAAEN,KAAA,CAAAC,SAAS;IAAGM,OAAO,EAAEP,KAAA,CAAAQ;iEACnFb,mBAAA,CAAmC,KARzCc,UAAA,EAQgB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}