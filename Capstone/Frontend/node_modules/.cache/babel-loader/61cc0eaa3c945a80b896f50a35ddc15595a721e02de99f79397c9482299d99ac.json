{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    LineChart: Line\n  },\n  data() {\n    return {\n      chartData: {\n        labels: [],\n        // Time labels (e.g., dates)\n        datasets: [{\n          label: 'Total Sales',\n          data: [],\n          borderColor: 'rgb(52, 152, 219)',\n          backgroundColor: 'rgba(52, 152, 219, 0.1)',\n          tension: 0.4,\n          borderWidth: 2,\n          pointRadius: 3,\n          pointHoverRadius: 6,\n          fill: true\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n            labels: {\n              usePointStyle: true,\n              padding: 20,\n              font: {\n                size: 12\n              }\n            }\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false,\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            titleColor: '#000',\n            bodyColor: '#000',\n            borderColor: '#ddd',\n            borderWidth: 1,\n            padding: 10,\n            callbacks: {\n              label: function (context) {\n                const value = context.parsed.y;\n                return `Total Sales: $${value.toFixed(2)}`;\n              }\n            }\n          }\n        },\n        interaction: {\n          mode: 'nearest',\n          axis: 'x',\n          intersect: false\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              maxRotation: 45,\n              minRotation: 45,\n              font: {\n                size: 11\n              }\n            },\n            title: {\n              display: true,\n              text: 'Date',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              borderDash: [2, 2]\n            },\n            ticks: {\n              callback: function (value) {\n                return '$' + value.toFixed(2);\n              }\n            },\n            title: {\n              display: true,\n              text: 'Total Sales ($)',\n              font: {\n                size: 14,\n                weight: 'bold'\n              }\n            }\n          }\n        }\n      }\n    };\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:5555/products/sales-performance');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched sales performance data:', data);\n      if (data && Array.isArray(data.salesPerformance)) {\n        const labels = [];\n        const salesData = [];\n\n        // Format data for the chart\n        data.salesPerformance.forEach(item => {\n          const date = new Date(item.date);\n          const formattedDate = new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit'\n          }).format(date);\n          labels.push(formattedDate);\n          salesData.push(parseFloat(item.total_sales));\n        });\n\n        // Sort data chronologically\n        const sortedIndices = labels.map((_, i) => i).sort((a, b) => new Date(data.salesPerformance[a].date) - new Date(data.salesPerformance[b].date));\n        this.chartData.labels = sortedIndices.map(i => labels[i]);\n        this.chartData.datasets[0].data = sortedIndices.map(i => salesData[i]);\n      } else {\n        console.error(\"Expected salesPerformance to be an array:\", data);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    } catch (error) {\n      console.error('Failed to fetch sales performance data:', error);\n      this.chartData.labels = [];\n      this.chartData.datasets[0].data = [];\n    }\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","Title","Tooltip","Legend","LineElement","PointElement","CategoryScale","LinearScale","register","components","LineChart","data","chartData","labels","datasets","label","borderColor","backgroundColor","tension","borderWidth","pointRadius","pointHoverRadius","fill","chartOptions","responsive","maintainAspectRatio","plugins","legend","display","position","usePointStyle","padding","font","size","tooltip","mode","intersect","titleColor","bodyColor","callbacks","context","value","parsed","y","toFixed","interaction","axis","scales","x","grid","ticks","maxRotation","minRotation","title","text","weight","beginAtZero","borderDash","callback","mounted","response","fetch","ok","Error","status","json","console","log","Array","isArray","salesPerformance","salesData","forEach","item","date","Date","formattedDate","Intl","DateTimeFormat","year","month","day","format","push","parseFloat","total_sales","sortedIndices","map","_","i","sort","a","b","error"],"sources":["C:\\laragon\\www\\Abas-Adeva-Final-project-Appdevvv\\project_appdev\\Frontend\\src\\views\\SalesPerformanceChart.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5>Sales Performance Over Time</h5>\n      </div>\n      <div class=\"card-body\">\n        <!-- Render the chart only when chartData is ready -->\n        <LineChart v-if=\"chartData && chartData.labels.length\" :data=\"chartData\" :options=\"chartOptions\" />\n        <p v-else>Loading chart data...</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Line } from 'vue-chartjs';\n  import {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    LineElement,\n    PointElement,\n    CategoryScale,\n    LinearScale,\n  } from 'chart.js';\n  \n  ChartJS.register(Title, Tooltip, Legend, LineElement, PointElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { LineChart: Line },\n    data() {\n      return {\n        chartData: {\n          labels: [], // Time labels (e.g., dates)\n          datasets: [{\n            label: 'Total Sales',\n            data: [],\n            borderColor: 'rgb(52, 152, 219)',\n            backgroundColor: 'rgba(52, 152, 219, 0.1)',\n            tension: 0.4,\n            borderWidth: 2,\n            pointRadius: 3,\n            pointHoverRadius: 6,\n            fill: true,\n          }],\n        },\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n              labels: {\n                usePointStyle: true,\n                padding: 20,\n                font: {\n                  size: 12\n                }\n              }\n            },\n            tooltip: {\n              mode: 'index',\n              intersect: false,\n              backgroundColor: 'rgba(255, 255, 255, 0.9)',\n              titleColor: '#000',\n              bodyColor: '#000',\n              borderColor: '#ddd',\n              borderWidth: 1,\n              padding: 10,\n              callbacks: {\n                label: function(context) {\n                  const value = context.parsed.y;\n                  return `Total Sales: $${value.toFixed(2)}`;\n                }\n              }\n            }\n          },\n          interaction: {\n            mode: 'nearest',\n            axis: 'x',\n            intersect: false\n          },\n          scales: {\n            x: {\n              grid: {\n                display: false\n              },\n              ticks: {\n                maxRotation: 45,\n                minRotation: 45,\n                font: {\n                  size: 11\n                }\n              },\n              title: {\n                display: true,\n                text: 'Date',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            },\n            y: {\n              beginAtZero: true,\n              grid: {\n                borderDash: [2, 2]\n              },\n              ticks: {\n                callback: function(value) {\n                  return '$' + value.toFixed(2);\n                }\n              },\n              title: {\n                display: true,\n                text: 'Total Sales ($)',\n                font: {\n                  size: 14,\n                  weight: 'bold'\n                }\n              }\n            }\n          }\n        },\n      };\n    },\n    async mounted() {\n      try {\n        const response = await fetch('http://localhost:5555/products/sales-performance');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched sales performance data:', data);\n\n        if (data && Array.isArray(data.salesPerformance)) {\n          const labels = [];\n          const salesData = [];\n\n          // Format data for the chart\n          data.salesPerformance.forEach(item => {\n            const date = new Date(item.date);\n            const formattedDate = new Intl.DateTimeFormat('en-US', {\n              year: 'numeric',\n              month: 'short',\n              day: '2-digit'\n            }).format(date);\n            \n            labels.push(formattedDate);\n            salesData.push(parseFloat(item.total_sales));\n          });\n\n          // Sort data chronologically\n          const sortedIndices = labels.map((_, i) => i)\n            .sort((a, b) => new Date(data.salesPerformance[a].date) - new Date(data.salesPerformance[b].date));\n\n          this.chartData.labels = sortedIndices.map(i => labels[i]);\n          this.chartData.datasets[0].data = sortedIndices.map(i => salesData[i]);\n        } else {\n          console.error(\"Expected salesPerformance to be an array:\", data);\n          this.chartData.labels = [];\n          this.chartData.datasets[0].data = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch sales performance data:', error);\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n      }\n    },\n  };\n  </script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}